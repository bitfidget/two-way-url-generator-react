{"ast":null,"code":"var UrlParamaters = {\n  stringify: function stringify(items) {\n    var ret = '';\n    Object.keys(items).map(function (item, index) {\n      ret += joinWith(index);\n      ret += item;\n      ret += '=';\n      ret += items[item];\n    });\n    return ret;\n  },\n  objectify: function objectify(str) {\n    var items = {};\n    str.replace(new RegExp(\"([^?=&]+)(=([^&]*))?\", \"g\"), function ($0, $1, $2, $3) {\n      items[$1] = $3;\n    });\n    return items;\n  }\n};\n\nvar joinWith = function joinWith(i) {\n  if (i > 0) {\n    return '&';\n  } else {\n    return '?';\n  }\n};\n\nexport default UrlParamaters;","map":{"version":3,"sources":["/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/src/functions/UrlParamaters.js"],"names":["UrlParamaters","stringify","items","ret","Object","keys","map","item","index","joinWith","objectify","str","replace","RegExp","$0","$1","$2","$3","i"],"mappings":"AAAA,IAAMA,aAAa,GAAG;AAClBC,EAAAA,SAAS,EAAE,mBAAUC,KAAV,EAAiB;AACxB,QAAIC,GAAG,GAAG,EAAV;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,GAAnB,CAAuB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAC1CL,MAAAA,GAAG,IAAIM,QAAQ,CAACD,KAAD,CAAf;AACAL,MAAAA,GAAG,IAAII,IAAP;AACAJ,MAAAA,GAAG,IAAI,GAAP;AACAA,MAAAA,GAAG,IAAID,KAAK,CAACK,IAAD,CAAZ;AACH,KALD;AAMA,WAAOJ,GAAP;AACH,GAViB;AAWlBO,EAAAA,SAAS,EAAE,mBAAUC,GAAV,EAAe;AACtB,QAAIT,KAAK,GAAG,EAAZ;AACAS,IAAAA,GAAG,CAACC,OAAJ,CACI,IAAIC,MAAJ,CAAW,sBAAX,EAAmC,GAAnC,CADJ,EAEI,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACtBf,MAAAA,KAAK,CAACa,EAAD,CAAL,GAAYE,EAAZ;AACH,KAJL;AAMA,WAAOf,KAAP;AACH;AApBiB,CAAtB;;AAuBA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACS,CAAD,EAAO;AACpB,MAAIA,CAAC,GAAG,CAAR,EAAW;AACP,WAAO,GAAP;AACH,GAFD,MAEO;AACH,WAAO,GAAP;AACH;AACJ,CAND;;AAQA,eAAelB,aAAf","sourcesContent":["const UrlParamaters = {\n    stringify: function (items) {\n        let ret = ''\n        Object.keys(items).map(function (item, index) {\n            ret += joinWith(index)\n            ret += item\n            ret += '='\n            ret += items[item]\n        })\n        return ret\n    },\n    objectify: function (str) {\n        let items = {}\n        str.replace(\n            new RegExp(\"([^?=&]+)(=([^&]*))?\", \"g\"),\n            function ($0, $1, $2, $3) {\n                items[$1] = $3\n            }\n        );\n        return items\n    }\n}\n\nconst joinWith = (i) => {\n    if (i > 0) {\n        return '&'\n    } else {\n        return '?'\n    }\n}\n\nexport default UrlParamaters"]},"metadata":{},"sourceType":"module"}