{"ast":null,"code":"import _classCallCheck from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/src/components/DragDropSection.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport ReactHtmlParser from 'react-html-parser'; // a little function to help us with reordering the result\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nvar move = function move(source, destination, droppableSource, droppableDestination) {\n  var sourceClone = Array.from(source);\n  var destClone = Array.from(destination);\n\n  var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n      _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n      removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  var result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey'\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: '100%'\n  };\n};\n\nvar DragDropSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DragDropSection, _Component);\n\n  function DragDropSection() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DragDropSection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DragDropSection)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      items: _this.props.items,\n      selected: _this.props.selected\n    };\n    _this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    _this.getList = function (id) {\n      return _this.state[_this.id2List[id]];\n    };\n\n    _this.onDragEnd = function (result) {\n      var source = result.source,\n          destination = result.destination; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        var items = reorder(_this.getList(source.droppableId), source.index, destination.index);\n        var state = {\n          items: items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        _this.setState(state);\n      } else {\n        var _result = move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);\n\n        _this.setState({\n          items: _result.droppable,\n          selected: _result.droppable2\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DragDropSection, [{\n    key: \"render\",\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, _this2.state.items.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127\n              },\n              __self: this\n            }), React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135\n              },\n              __self: this\n            }, item.title), ReactHtmlParser(item.content));\n          });\n        }), provided.placeholder);\n      })), React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, _this2.state.selected.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 158\n              },\n              __self: this\n            }), React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            }, item.title), ReactHtmlParser(item.content));\n          });\n        }), provided.placeholder);\n      }))));\n    }\n  }]);\n\n  return DragDropSection;\n}(Component);\n\nexport default DragDropSection;","map":{"version":3,"sources":["/Users/smallmighty/Projects/Westpac/two-way-url-generator-react/src/components/DragDropSection.jsx"],"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","ReactHtmlParser","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","DragDropSection","state","items","props","selected","id2List","droppable","droppable2","getList","id","onDragEnd","setState","provided","snapshot","innerRef","map","item","draggableProps","dragHandleProps","style","title","content","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport ReactHtmlParser from 'react-html-parser'\n\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: '100%'\n});\n\nclass DragDropSection extends Component {\n    state = {\n        items: this.props.items,\n        selected: this.props.selected\n    };\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected'\n    };\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let state = { items };\n\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n\n            this.setState(state);\n\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            this.setState({\n                items: result.droppable,\n                selected: result.droppable2\n            });\n        }\n    }\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        return (\n            <div className='row'>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div className='col-sm-6'>\n                        <Droppable droppableId=\"droppable\">\n                            {(provided, snapshot) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    style={getListStyle(snapshot.isDraggingOver)}>\n                                    {this.state.items.map((item, index) => (\n                                        <Draggable\n                                            key={item.id}\n                                            draggableId={item.id}\n                                            index={index}>\n                                            {(provided, snapshot) => (\n                                                <div\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    style={getItemStyle(\n                                                        snapshot.isDragging,\n                                                        provided.draggableProps.style\n                                                    )}>\n                                                    <h3>{item.title}</h3>\n                                                    {ReactHtmlParser(item.content)}\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    ))}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Droppable>\n                    </div>\n                    <div className='col-sm-6'>\n                        <Droppable droppableId=\"droppable2\">\n                            {(provided, snapshot) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    style={getListStyle(snapshot.isDraggingOver)}>\n                                    {this.state.selected.map((item, index) => (\n                                        <Draggable\n                                            key={item.id}\n                                            draggableId={item.id}\n                                            index={index}>\n                                            {(provided, snapshot) => (\n                                                <div\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    style={getItemStyle(\n                                                        snapshot.isDragging,\n                                                        provided.draggableProps.style\n                                                    )}>\n                                                    <h3>{item.title}</h3>\n                                                    {ReactHtmlParser(item.content)}\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    ))}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Droppable>\n                    </div>\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nexport default DragDropSection\n"]},"metadata":{},"sourceType":"module"}