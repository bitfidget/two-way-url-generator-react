/*! Grid v3.0.0 WBC */

@brand: WBC;


//////////////////////////////////////| GRID MIXIN
._grid( @brand ) {

	//////////////////////////////////////| SETTINGS
	._grid-breakpoints();


	//////////////////////////////////////| CLEARFIX CLASS
	.clearfix {
		._grid-clearfix();
	}


	/*
	 *  SETTINGS
	 */
	.getBrand() {
		// Gutters
		@gutter-xs: 12px;
		@gutter-sm: 24px;

		// Edges
		@edge-xs: 12px;
		@edge-sm: 36px;
		@edge-md: 48px;
		@edge-lg: 60px;

		// Widths
		@container-width-sm: @screen-sm;
		@container-width-md: @screen-md;
		@container-width-lg: @screen-lg;

		// Max width
		@container-max-width: @screen-lg + (@edge-lg * 2); //1320px
	}
	.getBrand() when (@brand = BOM) {}
	.getBrand() when (@brand = BSA) {}
	.getBrand() when (@brand = STG) {}
	.getBrand() when (@brand = WBC) {}
	.getBrand() when (@brand = WBG) {}
	.getBrand() when (@brand = BT) {}
	.getBrand();


	//////////////////////////////////////| BOX SIZING
	*,
	*:after,
	*:before {
		box-sizing: border-box;
	}


	//////////////////////////////////////| CONTAINER
	.container,
	.container-fluid {
		&:extend(.clearfix all);

		margin-right: auto;
		margin-left: auto;
		padding-right: @edge-xs;
		padding-left: @edge-xs;

		@media (min-width: @screen-sm) {
			padding-right: @edge-sm;
			padding-left: @edge-sm;
		}
		@media (min-width: @screen-md) {
			padding-right: @edge-md;
			padding-left: @edge-md;
		}
		@media (min-width: @screen-lg) {
			padding-right: @edge-lg;
			padding-left: @edge-lg;
		}
	}
	.container {
		@media (min-width: @screen-sm) { width: @container-width-sm; }
		@media (min-width: @screen-md) { width: @container-width-md; }
		@media (min-width: @screen-lg) { width: @container-width-lg; }
	}
	.container-fluid {
		max-width: @container-max-width;
	}


	//////////////////////////////////////| ROW
	.row {
		&:extend(.clearfix all);

		margin-left: (@gutter-xs / -2);
		margin-right: (@gutter-xs / -2);

		@media (min-width: @screen-sm) {
			margin-left: (@gutter-sm / -2);
			margin-right: (@gutter-sm / -2);
		}
	}


	//////////////////////////////////////| GRID COLUMNS
	[class*="col-"] {
		position: relative;
		min-height: 1px;
		padding-left: (@gutter-xs / 2);
		padding-right: (@gutter-xs / 2);

		@media (min-width: @screen-sm) {
			padding-left: (@gutter-sm / 2);
			padding-right: (@gutter-sm / 2);
		}
	}


	//////////////////////////////////////| GRID
	._bootstrap-make-grid();
}


//////////////////////////////////////| BOOTSTRAP GRID
._bootstrap-make-grid() {
	@grid-columns: 12;

	// Build column float class
	.float-grid-columns(@class) {
		.col(@index) { // initial
			@item: ~".col-@{class}-@{index}";
			.col((@index + 1), @item);
		}
		.col(@index, @list) when (@index =< @grid-columns) { // general
			@item: ~".col-@{class}-@{index}";
			.col((@index + 1), ~"@{list}, @{item}");
		}
		.col(@index, @list) when (@index > @grid-columns) { // terminal
			@{list} {
				float: left;
			}
		}
		.col(1); // kickstart it
	}

	// Build column width, push, pull and offset classes
	.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
		.col-@{class}-@{index} {
			width: percentage((@index / @grid-columns));
		}
	}
	.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
		.col-@{class}-push-@{index} {
			left: percentage((@index / @grid-columns));
		}
	}
	.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
		.col-@{class}-push-0 {
			left: auto;
		}
	}
	.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
		.col-@{class}-pull-@{index} {
			right: percentage((@index / @grid-columns));
		}
	}
	.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
		.col-@{class}-pull-0 {
			right: auto;
		}
	}
	.calc-grid-column(@index, @class, @type) when (@type = offset) {
		.col-@{class}-offset-@{index} {
			margin-left: percentage((@index / @grid-columns));
		}
	}

	// Basic looping in LESS
	.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
		.calc-grid-column(@index, @class, @type);
		// next iteration
		.loop-grid-columns((@index - 1), @class, @type);
	}

	// Create grid for specific class
	.make-grid(@class) {
		.float-grid-columns(@class);
		.loop-grid-columns(@grid-columns, @class, width);
		.loop-grid-columns(@grid-columns, @class, pull);
		.loop-grid-columns(@grid-columns, @class, push);
		.loop-grid-columns(@grid-columns, @class, offset);
	}

	// Make grid for XS, SM, MD and LG
	.make-grid(xs);
	@media (min-width: @screen-sm) { .make-grid(sm); }
	@media (min-width: @screen-md) { .make-grid(md); }
	@media (min-width: @screen-lg) { .make-grid(lg); }
}


//////////////////////////////////////| BREAKPOINTS
._grid-breakpoints() {
	@screen-xs: 480px;
	@screen-sm: 768px;
	@screen-md: 992px;
	@screen-lg: 1200px;
}


//////////////////////////////////////| CLEARFIX
._grid-clearfix() {
	&:before,
	&:after {
		content: '';
		display: table;
	}
	&:after {
		clear: both;
	}
}


//////////////////////////////////////| GRID
._grid( @brand );
